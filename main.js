/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EditorPlaintextCalloutAppend
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var filetype = {
  "sh": "bash",
  "py": "python"
};
var reject_filetypes = ["md", "png", "jpg", "jpeg", "gif", "bmp", "svg", "mp3", "webm", "wav", "m4a", "ogg", "3gp", "flac", "mp4", "webm", "ogv", "pdf"];
var EditorPlaintextCalloutAppend = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onload() {
    await this.loadSettings();
    this.registerInterval(
      // TODO: is this the best process to do this? Is there a better way to register this (view change or something like that?)
      window.setInterval(() => this.embedPlaintextFiles(this.app, this.app.vault), 1e4)
    );
  }
  onunload() {
  }
  async obsidianUrl2FileContents(fileUrl, vault) {
    const fileTFile = await vault.getFileByPath(fileUrl);
    const fileContents = await vault.cachedRead(fileTFile);
    return fileContents;
  }
  async embedPlaintextFiles(app, vault) {
    let currentFile = app.workspace.getActiveFile();
    const currentFileContents = await vault.read(currentFile);
    let currentFileContents_split = currentFileContents.split("![[");
    let finalFileContents = currentFileContents_split[0];
    for (const item of currentFileContents_split.slice(1)) {
      let currentContent = item.split("]]\n");
      let skip = false;
      try {
        let otherFileContents = await this.obsidianUrl2FileContents(currentContent[0], vault);
        if (otherFileContents.contains("```") | reject_filetypes.contains(currentContent[0].split(".")[1])) {
          console.log("file (" + currentContent[0] + ") contains ``` or is a rejected filetype. Ignoring");
          finalFileContents += "![[" + currentContent[0] + "]]\n" + currentContent[1];
        } else {
          if (currentContent[1].slice(0, 8) == "\n---\n```") {
            let filePrintout = currentContent[1].split("\n---\n```");
            filePrintout = filePrintout[1].split("\n```\n---\n");
            currentContent[1] = filePrintout[1];
          }
          if (!reject_filetypes.contains(currentContent[0].split(".")[1])) {
            console.log("file (" + currentContent[0] + ") is being added.");
            if (Object.keys(filetype).includes(currentContent[0].split(".")[1])) {
              finalFileContents += "![[" + currentContent[0] + "]]\n\n---\n```" + filetype[currentContent[0].split(".")[1]] + "\n" + otherFileContents + "\n```\n---\n" + currentContent[1];
            } else {
              finalFileContents += "![[" + currentContent[0] + "]]\n\n---\n```" + currentContent[0].split(".")[1] + "\n" + otherFileContents + "\n```\n---\n" + currentContent[1];
            }
          } else {
            console.log("skipping .md file" + currentContent[0]);
            finalFileContents += "![[" + currentContent[0] + "]]\n\n" + currentContent[1];
          }
        }
      } catch (e) {
        console.log("failed to add file (" + currentContent[0] + "). Not found.");
        finalFileContents += "![[" + currentContent[0] + "]]\n" + currentContent[1];
      }
    }
    console.log("\nfinal contents:");
    console.log(finalFileContents);
    app.vault.modify(currentFile, finalFileContents);
  }
};
//# sourceMappingURL=data:application/json;base64,
